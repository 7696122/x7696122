[{"id":0,"href":"/braindump/20220106053323-nix/","title":"Dot/Nix(OS)","section":"Braindump","content":"1 snippets #  \n1# . \u0026#34;$HOME/.nix-profile/etc/profile.d/hm-session-vars.sh\u0026#34; 2. \u0026#34;/etc/profiles/per-user/$USER/etc/profile.d/hm-session-vars.sh\u0026#34; Code Snippet 1: shell에서 home-manager 사용하기  2 .profile #  1\u0026lt;\u0026lt;shell에서 home-manager 사용하기\u0026gt;\u0026gt; 3 .zshrc #  1export PATH=~/bin:~/.emacs.d/bin:~/.npm-global/bin:$PATH 2 3# export NIX_PATH=$HOME/.nix-defexpr/channels${NIX_PATH:+:}$NIX_PATH 4export NIX_PATH=$HOME/.nix-defexpr/channels:/nix/var/nix/profiles/per-user/root/channels${NIX_PATH:+:$NIX_PATH} 5 6\u0026lt;\u0026lt;shell에서 home-manager 사용하기\u0026gt;\u0026gt; 78eval \u0026#34;$(direnv hook zsh)\u0026#34; 4 .gitconfig.work #  1[core] 2\tautocrlf = true 3[user] 4\tname = ym.kim 5\temail = ym.kim@lfcorp.com 5 .gitconfig.personal #  1[user] 2\tname = 7696122 3\temail = 7696122@gmail.com 6 .config/ #  6.1 nix/ #  6.1.1 /nix.conf #  1experimental-features = nix-command flakes 6.2 nixpkgs/ #  6.2.1 darwin/ #     /configuration.nix\n1{ pkgs, ... }: { 2 imports = [ \u0026lt;home-manager/nix-darwin\u0026gt; ]; 3 4 users.users = { 5 mnml = { 6 name = \u0026#34;mnml\u0026#34;; 7 home = \u0026#34;/Users/mnml\u0026#34;; 8 }; 9 }; 10 11 home-manager = (import ./module/home-manager.nix); 12 13 nixpkgs.overlays = [ 14 (import (builtins.fetchTarball \u0026#34;https://github.com/oxalica/rust-overlay/archive/master.tar.gz\u0026#34;)) 15 (import (builtins.fetchTarball { 16 url = 17 \u0026#34;https://github.com/nix-community/emacs-overlay/archive/master.tar.gz\u0026#34;; 18 })) 19 # (import \u0026#34;${ 20 # fetchTarball 21 # \u0026#34;https://github.com/nix-community/fenix/archive/main.tar.gz\u0026#34; 22 # }/overlay.nix\u0026#34;) 23 ]; 24 environment = { 25 # List packages installed in system profile. To search by name, run: 26 # $ nix-env -qaP | grep wget 27 systemPackages = with pkgs; [ 28 home-manager 29 vim 30 direnv 31 nodejs 32 yarn yarn2nix 33 rust-bin.stable.latest.default 34 # (fenix.complete.withComponents [ 35 # \u0026#34;cargo\u0026#34; 36 # \u0026#34;clippy\u0026#34; 37 # \u0026#34;rust-src\u0026#34; 38 # \u0026#34;rustc\u0026#34; 39 # \u0026#34;rustfmt\u0026#34; 40 # ]) 41 # rust-analyzer-nightly 42 ]; 43 44 # Use a custom configuration.nix location. 45 # $ darwin-rebuild switch -I darwin-config=$HOME/.config/nixpkgs/darwin/configuration.nix 46 darwinConfig = \u0026#34;$HOME/.config/nixpkgs/darwin/configuration.nix\u0026#34;; 47 }; 48 49 networking = (import ./module/networking.nix); 50 homebrew = (import ./module/homebrew.nix); 51 programs = (import ./module/programs.nix); 52 services = (import ./module/services.nix); 53 system = (import ./module/system.nix); 54} 1# https://github.com/LnL7/nix-darwin/wiki/Changing-the-configuration.nix-location 2darwin-rebuild switch -I darwin-config=$HOME/.config/nixpkgs/darwin/configuration.nix     module/\n   /homebrew.nix\n1{ 2 enable = true; 3 casks = [ 4 \u0026#34;alfred\u0026#34; 5 # \u0026#34;plistedit-pro\u0026#34; 6 # \u0026#34;plistedplus\u0026#34; 7 \u0026#34;spotify\u0026#34; 8 # \u0026#34;genymotion\u0026#34; 9 \u0026#34;virtualbox\u0026#34; 10 \u0026#34;iterm2\u0026#34; 11 \u0026#34;protonvpn\u0026#34; 12 \u0026#34;visual-studio-code\u0026#34; 13 \u0026#34;jetbrains-toolbox\u0026#34; 14 \u0026#34;rectangle\u0026#34; 15 \u0026#34;karabiner-elements\u0026#34; 16 \u0026#34;slack\u0026#34; 17 \u0026#34;prefs-editor\u0026#34; 18 \u0026#34;google-chrome\u0026#34; 19 \u0026#34;firefox\u0026#34; 20 \u0026#34;lastpass\u0026#34; 21 \u0026#34;notion\u0026#34; 22 \u0026#34;homebrew/cask-drivers/logitech-options\u0026#34; 23 ]; 24 brews = [ 25 # \u0026#34;gnutls\u0026#34; 26 # \u0026#34;texinfo\u0026#34; 27 # \u0026#34;autoconf\u0026#34; 28 # \u0026#34;zlib\u0026#34; 29 # \u0026#34;libgccjit\u0026#34; 30 ]; 31}     /system.nix\n1{ 2 defaults = { 3 NSGlobalDomain = { 4 ApplePressAndHoldEnabled = 5 false; # defaults read -g ApplePressAndHoldEnabled 6 KeyRepeat = 2; # normal minimum is 2 (30 ms) 7 InitialKeyRepeat = 15; # normal minimum is 15 (225 ms) 8 9 _HIHideMenuBar = true; 10 11 # AppleLocale = \u0026#34;en_KR\u0026#34;; 12 }; 13 dock = { 14 autohide = true; 15 autohide-delay = \u0026#34;0\u0026#34;; 16 }; 17 trackpad = { 18 Clicking = true; 19 Dragging = true; 20 }; 21 finder = { 22 AppleShowAllExtensions = true; 23 QuitMenuItem = true; 24 }; 25 SoftwareUpdate = { AutomaticallyInstallMacOSUpdates = true; }; 26 }; 27 keyboard = { 28 enableKeyMapping = true; 29 remapCapsLockToControl = true; 30 swapLeftCommandAndLeftAlt = false; 31 32 # https://www.nanoant.com/mac/macos-function-key-remapping-with-hidutil 33 # https://github.com/LnL7/nix-darwin/issues/55 34 # https://blog.trk.in.rs/2017/05/23/macbook-macos-osx/ 35 # \u0026#34;~/Library/Preferences/com.apple.symbolichotkeys.plist\u0026#34; 36 # 61 -\u0026gt; 131072 37 userKeyMapping = [ 38 # { 39 # HIDKeyboardModifierMappingSrc = 30064771303; 40 # HIDKeyboardModifierMappingDst = 30064771181; 41 # } 42 ]; 43 }; 44 45 # Used for backwards compatibility, please read the changelog before changing. 46 # $ darwin-rebuild changelog 47 stateVersion = 4; 48}     /services.nix\n1{ 2 # Auto upgrade nix package and the daemon service. 3 nix-daemon.enable = true; 4 emacs.enable = true; 5 lorri.enable = true; 6}     /programs.nix\n1{ 2 # Create /etc/bashrc that loads the nix-darwin environment. 3 zsh = { 4 enable = true; # default shell on catalina 5 enableSyntaxHighlighting = true; 6 }; 7}     /networking.nix\n1{ 2 # networking.extraHosts = \u0026#39;\u0026#39; 3 # 127.0.0.2 other-localhost 4 # 10.0.0.1 server 5 # \u0026#39;\u0026#39;; 6 localHostName = \u0026#34;mnml\u0026#34;; 7}     /home-manager.nix\n1{ 2 verbose = true; 3 useUserPackages = true; 4 useGlobalPkgs = false; 5 users.mnml = (import ../../home.nix); 6}     6.2.2 /home.nix #  1{ target, config, lib, pkgs, ... }: { 2 # targets.darwin.defaults.\u0026#34;com.apple.menuextra.battery\u0026#34;.ShowPercent = \u0026#34;YES\u0026#34;; 3 4 home.packages = with pkgs; [ 5 gnugrep 6 gnutar 7 gnumake 8 gnused 9 coreutils 10 coreutils-prefixed 11 gzip 12 ripgrep 13 nixfmt 14 fd 15 shellcheck 16 editorconfig-core-c 17 python39Packages.grip 18 graphviz 19 clang-tools 20 cmake 21 pandoc 22 nodejs 23 nodePackages.js-beautify 24 nodePackages.stylelint 25 nodePackages.prettier 26 nodePackages.bash-language-server 27 nodePackages.typescript 28 nodePackages.typescript-language-server 29 nodePackages.indium 30 nodePackages.firebase-tools 31 hugo 32 loc 33 fontconfig 34 podman # https://github.com/LnL7/nix-darwin/issues/112 35 dos2unix 36 d2coding 37 38 lastpass-cli 39 jq 40 41 material-design-icons 42 weather-icons 43 font-awesome 44 45 46 # rust-bin.stable.latest.default 47 # foreman 48 # rustup 49 # rust-analyzer 50 ]; 51 52 programs.fish = { enable = true; }; 53 54 programs.emacs = { 55 enable = true; 56 package = pkgs.emacsGcc; 57 # https://github.com/nix-community/emacs-overlay/issues/17 58 # package = (pkgs.emacsGit.override { 59 # withXwidgets = true; 60 # }); 61 extraPackages = epkgs: [ epkgs.vterm ]; 62 }; 63 64 programs.git = { 65 enable = true; 66 package = pkgs.gitFull; 67 extraConfig = { 68 # core = { autocrlf = true; }; 69 # include = { path = \u0026#34;~/.gitconfig.local\u0026#34;; }; 70 # [[https://www.freecodecamp.org/news/how-to-handle-multiple-git-configurations-in-one-machine/][How to Use Multiple Git Configs on One Computer]] 71 includeIf.\u0026#34;gitdir:~/Work/\u0026#34; = { path = \u0026#34;~/.gitconfig.work\u0026#34;; }; 72 includeIf.\u0026#34;gitdir:~/Developer/\u0026#34; = { path = \u0026#34;~/.gitconfig.personal\u0026#34;; }; 73 includeIf.\u0026#34;gitdir:~/org/\u0026#34; = { path = \u0026#34;~/.gitconfig.personal\u0026#34;; }; 74 }; 75 }; 76 77 programs.tmux = { 78 enable = true; 79 prefix = \u0026#34;M-\\\\\\\\\u0026#34;; 80 escapeTime = 0; 81 # shell = \u0026#34;${pkgs.fish}/bin/fish\u0026#34;; 82 shell = \u0026#34;${pkgs.zsh}/bin/zsh\u0026#34;; 83 keyMode = \u0026#34;vi\u0026#34;; 84 terminal = \u0026#34;xterm-256color\u0026#34;; 85 clock24 = true; 86 # extraConfig = lib.strings.fileContents ~/.tmux.conf.local; 87 extraConfig = \u0026#39;\u0026#39; 88bind-key R source-file ~/.config/tmux/tmux.conf \\; display-message \u0026#34;tmux.conf reloaded\u0026#34; 89bind-key M split-window -h \u0026#34;vim ~/.tmux.conf\u0026#34; 9091bind-key B set-option -g status 9293bind c new-window -c \u0026#34;#{pane_current_path}\u0026#34; 94bind \u0026#39;\u0026#34;\u0026#39; split-window -c \u0026#34;#{pane_current_path}\u0026#34; 95bind % split-window -h -c \u0026#34;#{pane_current_path}\u0026#34; 9697set -g mouse on 9899set -g window-active-style \u0026#39;fg=colour0,bg=colour231\u0026#39; # 255로 하면 하얀색이 안나와 100set -g window-style \u0026#39;fg=colour8,bg=colour15\u0026#39; 101set -g pane-active-border-style fg=colour10,bg=colour231 102set -g pane-border-style fg=colour8,bg=colour7 103\u0026#39;\u0026#39;; 104 # tmuxp.enable = true; 105 # tmuxinator.enable = true; 106 plugins = with pkgs; [ 107 tmuxPlugins.pain-control 108 tmuxPlugins.better-mouse-mode 109 tmuxPlugins.cpu 110 # { 111 # plugin = tmuxPlugins.resurrect; 112 # extraConfig = \u0026#34;set -g @resurrect-strategy-nvim \u0026#39;session\u0026#39;\u0026#34;; 113 # } 114 # { 115 # plugin = tmuxPlugins.continuum; 116 # extraConfig = \u0026#39;\u0026#39; 117 # set -g @continuum-restore \u0026#39;on\u0026#39; 118 # set -g @continuum-save-interval \u0026#39;60\u0026#39; # minutes 119 # \u0026#39;\u0026#39;; 120 # } 121 ]; 122 }; 123 124 programs.bat.enable = true; 125 126 programs.direnv = { 127 enable = true; 128 nix-direnv.enable = false; 129 # optional for nix flakes support in home-manager 21.11, not required in home-manager unstable or 22.05 130 # # nix-direnv.enableFlakes = true; 131 enableBashIntegration = true; 132 enableZshIntegration = true; 133 # enableFishIntegration = false; 134 }; 135 136 # Let Home Manager install and manage itself. 137 programs.home-manager.enable = true; 138} 1home-manager switch --flake ~/.config/nixpkgs/#$USER -v 6.2.3 /nixpkgs.config #  1nixpkgs.config.allowUnfree = true; 6.2.4 overlays.nix #  1[ 2 (import (builtins.fetchTarball { 3 url = 4 \u0026#34;https://github.com/nix-community/emacs-overlay/archive/master.tar.gz\u0026#34;; 5 })) 6 (import (builtins.fetchTarball 7 \u0026#34;https://github.com/oxalica/rust-overlay/archive/master.tar.gz\u0026#34;)) 8] "},{"id":1,"href":"/braindump/20220109082942-shift_space/","title":"MacOS에서 shift-space로 언어변경","section":"Braindump","content":"cli로 수정하기 #  Write #  스크립트 #  1# 설정 변경 2defaults write com.apple.symbolichotkeys AppleSymbolicHotKeys \\ 3 -dict-add 60 \u0026#34; 4\u0026lt;dict\u0026gt; 5\u0026lt;key\u0026gt;value\u0026lt;/key\u0026gt; 6\u0026lt;dict\u0026gt; 7\u0026lt;key\u0026gt;type\u0026lt;/key\u0026gt; 8\u0026lt;string\u0026gt;standard\u0026lt;/string\u0026gt; 9\u0026lt;key\u0026gt;parameters\u0026lt;/key\u0026gt; 10\u0026lt;array\u0026gt; 11\u0026lt;integer\u0026gt;32\u0026lt;/integer\u0026gt; 12\u0026lt;integer\u0026gt;49\u0026lt;/integer\u0026gt; 13\u0026lt;integer\u0026gt;393216\u0026lt;/integer\u0026gt; \u0026lt;!-- from 262144 to 393216 --\u0026gt; 14\u0026lt;/array\u0026gt; 15\u0026lt;/dict\u0026gt; 16\u0026lt;key\u0026gt;enabled\u0026lt;/key\u0026gt; 17\u0026lt;true/\u0026gt; 18\u0026lt;/dict\u0026gt; 19\u0026#34; 20defaults write com.apple.symbolichotkeys AppleSymbolicHotKeys \\ 21 -dict-add 61 \u0026#34; 22\u0026lt;dict\u0026gt; 23\u0026lt;key\u0026gt;value\u0026lt;/key\u0026gt; 24\u0026lt;dict\u0026gt; 25\u0026lt;key\u0026gt;type\u0026lt;/key\u0026gt; 26\u0026lt;string\u0026gt;standard\u0026lt;/string\u0026gt; 27\u0026lt;key\u0026gt;parameters\u0026lt;/key\u0026gt; 28\u0026lt;array\u0026gt; 29\u0026lt;integer\u0026gt;32\u0026lt;/integer\u0026gt; 30\u0026lt;integer\u0026gt;49\u0026lt;/integer\u0026gt; 31\u0026lt;integer\u0026gt;131072\u0026lt;/integer\u0026gt; \u0026lt;!-- from 1572864 to 131072 --\u0026gt; 32\u0026lt;/array\u0026gt; 33\u0026lt;/dict\u0026gt; 34\u0026lt;key\u0026gt;enabled\u0026lt;/key\u0026gt; 35\u0026lt;true/\u0026gt; 36\u0026lt;/dict\u0026gt; 37\u0026#34; 38 39# 설정 활성화 40/System/Library/PrivateFrameworks/SystemAdministration.framework/Resources/activateSettings -u Code Snippet 1: set_key_input_method.sh  설정 변경 #  \n1defaults write com.apple.symbolichotkeys AppleSymbolicHotKeys \\ 2 -dict-add 60 \u0026#34; 3\u0026lt;\u0026lt;60 xml 설정\u0026gt;\u0026gt; 4\u0026#34; Code Snippet 2: ~/Library/Preferences/com.apple.symbolichotkeys.plist 의 AppleSymbolicHotKeys \u0026gt; 60 수정  \n1defaults write com.apple.symbolichotkeys AppleSymbolicHotKeys \\ 2 -dict-add 61 \u0026#34; 3\u0026lt;\u0026lt;61 xml 설정\u0026gt;\u0026gt; 4\u0026#34; Code Snippet 3: ~/Library/Preferences/com.apple.symbolichotkeys.plist 의 AppleSymbolicHotKeys \u0026gt; 61 수정     xml 설정\n\n1\u0026lt;dict\u0026gt; 2 \u0026lt;key\u0026gt;value\u0026lt;/key\u0026gt; 3 \u0026lt;dict\u0026gt; 4 \u0026lt;key\u0026gt;type\u0026lt;/key\u0026gt; 5 \u0026lt;string\u0026gt;standard\u0026lt;/string\u0026gt; 6 \u0026lt;key\u0026gt;parameters\u0026lt;/key\u0026gt; 7 \u0026lt;array\u0026gt; 8 \u0026lt;integer\u0026gt;32\u0026lt;/integer\u0026gt; 9 \u0026lt;integer\u0026gt;49\u0026lt;/integer\u0026gt; 10 \u0026lt;integer\u0026gt;393216\u0026lt;/integer\u0026gt; \u0026lt;!-- from 262144 to 393216 --\u0026gt; 11 \u0026lt;/array\u0026gt; 12 \u0026lt;/dict\u0026gt; 13 \u0026lt;key\u0026gt;enabled\u0026lt;/key\u0026gt; 14 \u0026lt;true/\u0026gt; 15\u0026lt;/dict\u0026gt;  Code Snippet 4: 60의 내용  \n1\u0026lt;dict\u0026gt; 2 \u0026lt;key\u0026gt;value\u0026lt;/key\u0026gt; 3 \u0026lt;dict\u0026gt; 4 \u0026lt;key\u0026gt;type\u0026lt;/key\u0026gt; 5 \u0026lt;string\u0026gt;standard\u0026lt;/string\u0026gt; 6 \u0026lt;key\u0026gt;parameters\u0026lt;/key\u0026gt; 7 \u0026lt;array\u0026gt; 8 \u0026lt;integer\u0026gt;32\u0026lt;/integer\u0026gt; 9 \u0026lt;integer\u0026gt;49\u0026lt;/integer\u0026gt; 10 \u0026lt;integer\u0026gt;131072\u0026lt;/integer\u0026gt; \u0026lt;!-- from 1572864 to 131072 --\u0026gt; 11 \u0026lt;/array\u0026gt; 12 \u0026lt;/dict\u0026gt; 13 \u0026lt;key\u0026gt;enabled\u0026lt;/key\u0026gt; 14 \u0026lt;true/\u0026gt; 15\u0026lt;/dict\u0026gt;  Code Snippet 5: 61의 내용    설정 활성화 #  \n1/System/Library/PrivateFrameworks/SystemAdministration.framework/Resources/activateSettings -u Code Snippet 6: 재부팅 없이 설정을 활성화 하는 명령어  Read #  1defaults read com.apple.symbolichotkeys AppleSymbolicHotKeys Code Snippet 7: 변경된 내용 확인하는 명령어  1{ 2 ... 3 60 = { 4 enabled = 1; 5 value = { 6 parameters = ( 7 32, 8 49, 9 393216 10 ); 11 type = standard; 12 }; 13 }; 14 61 = { 15 enabled = 1; 16 value = { 17 parameters = ( 18 32, 19 49, 20 131072 21 ); 22 type = standard; 23 }; 24 }; 25 ... 26} 직접 수정하기 #  대상파일 #  1open ~/Library/Preferences/com.apple.symbolichotkeys.plist Code Snippet 8: ~/Library/Preferences/com.apple.symbolichotkeys.plist 을 연다  수정 전 #   Figure 1: 수정전 ~/Library/Preferences/com.apple.symbolichotkeys.plist 60\n   Figure 2: 수정전 ~/Library/Preferences/com.apple.symbolichotkeys.plist 61\n  수정 후 #   Figure 3: 수정후 ~/Library/Preferences/com.apple.symbolichotkeys.plist 60\n   Figure 4: 수정후 ~/Library/Preferences/com.apple.symbolichotkeys.plist 61\n  References #    Applying com.apple.symbolichotkeys changes instantaneously - Zameer Manji  mac os 맥에서 한영전환키를 shift-space 로 변경.md · GitHub  Documenting com.apple.symbolichotkeys.plist - The macosxhints Forums  "}]